
// const array = [1, 2, 3, 4, 5]

// const arrayAcc = array.reduce((acc, curr) => acc + curr, 0)

// console.log(arrayAcc)


//       const arrayAcc = () => {
//   const array = [1, 2, 3, 4, 5];  // Ton tableau d'exemple
//   let result = 0;  // Initialisation de la variable pour stocker la somme

//   // Parcourir le tableau avec une boucle for
//   for (let i = 0; i < array.length; i++) {
//     result += array[i];  // Ajouter chaque √©l√©ment du tableau √† la somme
//   }

//   return result;  // Retourner le r√©sultat
// }

// console.log(arrayAcc());  // Appeler la fonction et afficher le r√©sultat

//Autre boucle for
// const arrayAcc = () => {
//   const array = [1, 2, 3, 4, 5];  // Ton tableau d'exemple
//   let result = 0;  // Initialisation de la variable pour stocker la somme

//   // Utilisation de la boucle for...of pour parcourir les √©l√©ments du tableau
//   for (const num of array) {
//     result += num;  // Ajouter chaque √©l√©ment directement √† la somme
//   }

//   return result;  // Retourner le r√©sultat
// }

// console.log(arrayAcc());  // Appeler la fonction et afficher le r√©sultat

//Trouver le maximum

// const compare = () => {
//     const numbers = [3, 7, 2, 9, 5]
//     let max = numbers[0]
//     for (const num of numbers) {
//         if (num > max) {
//             max = num
//         }
//     }
//     return max;
// }
// console.log(compare())
// const numbers = [3, 7, 2, 9, 5];
// const compare = () => {
//   const sortedNumbers = numbers.sort((a, b) => a - b);
//   return sortedNumbers[sortedNumbers.length - 1]; // Retourner le dernier √©l√©ment
// }

// console.log(compare()); // Affiche le maximum


// Exercice 3 : V√©rifier si un mot est un palindrome
// √âcris une fonction en JavaScript qui prend une cha√Æne de caract√®res et retourne true si c'est un palindrome (c'est-√†-dire qu'elle se lit de la m√™me mani√®re de gauche √† droite et de droite √† gauche), et false sinon.

// Exemple :
// Entr√©e : "radar"

// Sortie : true

// Entr√©e : "hello"

// Sortie : false

// Indice : Tu peux comparer la cha√Æne originale avec sa version invers√©e.

// const palindrome = (word) => {
//     const reversedWord = word.split('').reverse().join('')
//     return word === reversedWord
// }
// console.log(palindrome("radar")); // Devrait afficher true
// console.log(palindrome("hello")); // Devrait afficher false
// console.log(palindrome("level")); // Devrait afficher true
// console.log(palindrome("world")); // Devrait afficher false

/*split('') : Divise la cha√Æne en un tableau de caract√®res.
reverse() : Inverse l'ordre des √©l√©ments du tableau.
join('') : Reconstitue le tableau en une cha√Æne de caract√®res.
Enfin, tu compares la cha√Æne d'origine avec la cha√Æne invers√©e pour v√©rifier si c'est un palindrome.*/

// Exercice 4 : Compter les voyelles dans une cha√Æne
// √âcris une fonction en JavaScript qui prend une cha√Æne de caract√®res et retourne le nombre de voyelles (a, e, i, o, u) pr√©sentes dans cette cha√Æne.

// Exemple :
// Entr√©e : "bonjour"

// Sortie : 3 (les voyelles sont o, o, u)

// Entr√©e : "test"

// Sortie : 1 (la voyelle est e)

// Indice : Tu peux parcourir la cha√Æne et v√©rifier chaque caract√®re pour voir s'il s'agit d'une voyelle.

// Prends ton temps, et fais-moi signe si tu as besoin d'aide ou si tu veux un retour sur ton code !


// const countVowels = (word) => {
//     const vowels = ['a', 'e', 'i', 'o', 'u']
//     let vowelsConter = 0;
//     const wordSplit = word.split('')
//     console.log(wordSplit)
//     for (const letter of wordSplit) {
//         if (vowels.includes(letter.toLowerCase())) {
//             console.log(letter)
//             vowelsConter += 1
//             console.log(vowelsConter)

//         }

//     }
//     return vowelsConter
// }
// console.log(countVowels("Bonjour"))
// console.log(countVowels("HEllOo"))
// C'est parfait maintenant ! üéâ

// Ce que fait ton code :
// Il parcourt chaque lettre de la cha√Æne word.
// Il v√©rifie si la lettre est une voyelle en utilisant vowels.includes(letter).
// Si c'est le cas, il incr√©mente le compteur vowelsCounter.
// √Ä la fin, il retourne le nombre total de voyelles.
// Points suppl√©mentaires :
// Pour que cela fonctionne avec des lettres majuscules (comme dans "Bonjour"), tu pourrais envisager de convertir chaque lettre en minuscule en utilisant letter.toLowerCase() avant de faire la v√©rification.
// Si tout fonctionne comme pr√©vu dans le terminal, tu as r√©ussi l'exercice ! Si tu souhaites un autre exercice ou si tu as des questions, fais-le moi savoir ! üòä

// Exercice 5 : Trouver les chiffres pairs dans un tableau
// √âcris une fonction en JavaScript qui prend un tableau de nombres et retourne un nouveau tableau contenant uniquement les chiffres pairs.

// Exemple :
// Entr√©e : [1, 2, 3, 4, 5, 6]

// Sortie : [2, 4, 6]

// Entr√©e : [10, 15, 20, 25, 30]

// Sortie : [10, 20, 30]

// Indice : Tu peux utiliser une boucle pour parcourir le tableau et v√©rifier si chaque nombre est pair.

// const findEvenNumbers = (num) => {
//     const array = [1, 2, 3, 4, 5, 6]
//     const newArr = []
//     array.map((num) => {
//         if (num % 2 === 0) {
//             newArr.push(num)
//         }
//     })
//     console.log(newArr)
//     return newArr
// }
// console.log(findEvenNumbers())

//Autre m√©thode
// const findEvenNumbers = (numbers) => {
//     const array = [1, 2, 3, 4, 5, 6]
//     const newArr = []
//     for (const num of array) {
//         if (num % 2 === 0) {
//             newArr.push(num)
//         }
//     }
//     return newArr
// }
// console.log(findEvenNumbers())
// Exercice 6 : Trouver le nombre maximum dans un tableau
// √âcris une fonction en JavaScript qui prend un tableau de nombres et retourne le plus grand nombre.

// Exemple :
// Entr√©e : [3, 5, 7, 2, 8]

// Sortie : 8

// Entr√©e : [10, 20, 5, 15]

// Sortie : 20

// Indice : Tu peux initialiser une variable avec une valeur du tableau et la comparer avec les autres √©l√©ments.

// Prends ton temps pour r√©soudre cet exercice, et fais-moi signe si tu veux de l'aide ou si tu as besoin de v√©rifier si tu es sur la bonne voie ! üòä

// const largestNumber = () => {

//     const array = [3, 5, 7, 2, 8]
//     let number = array[0]
//     for (const num of array) {
//         if (num > number) {
//             number = num
//         }
//     }
//     return number
// }
// console.log(largestNumber())
// Exercice 7 : Supprimer les doublons d'un tableau
// √âcris une fonction en JavaScript qui prend un tableau de nombres et retourne un nouveau tableau avec tous les doublons supprim√©s.

// Exemple :
// Entr√©e : [1, 2, 2, 3, 4, 4, 5]

// Sortie : [1, 2, 3, 4, 5]

// Entr√©e : [10, 20, 20, 30, 30, 30]

// Sortie : [10, 20, 30]

// Indice : Tu peux utiliser un tableau ou une autre structure de donn√©es pour v√©rifier si un √©l√©ment a d√©j√† √©t√© ajout√©.

// Essaie-le, et comme d'habitude, fais-moi signe si tu as besoin d'aide ou si tu veux v√©rifier ton approche ! üòä

// const noDouble = () => {
//     const array = [10, 20, 20, 30, 30, 30]
//     const newArr = []
//     for (const num of array) {
//         if (!newArr.includes(num)) { //V√©rifie si num n‚Äôest pas d√©j√† dans newArr en utilisant !newArr.includes(num)
//             newArr.push(num)
//         }
//         console.log(newArr)
//     }
// }
// console.log(noDouble())

//Autre m√©thode

// const noDouble = (array) => {
//     return [...new Set(array)];//Set permet de cr√©er un objet Set qui permet de stocker des valeurs uniques de n'importe quel type, que ce soit des valeurs primitives ou des r√©f√©rences d'objets.
// }
// Exercice 8 : Calculer la somme des carr√©s des nombres

// √âcris une fonction en JavaScript qui prend un tableau de nombres et retourne la somme des carr√©s de chaque nombre dans le tableau.

// Exemple 1 :
// Entr√©e : [1, 2, 3]
// Sortie : 14 (car 1^2 + 2^2 + 3^2 = 1 + 4 + 9 = 14)

// Exemple 2 :
// Entr√©e : [4, 5, 6]
// Sortie : 77 (car 4^2 + 5^2 + 6^2 = 16 + 25 + 36 = 77)

// **Indice** : Tu peux utiliser `map()` pour cr√©er un tableau des carr√©s des nombres et ensuite utiliser `reduce()` pour calculer la somme.

// const sumOfSquares = (array) => {
//     return array.map(num => num * num).reduce((acc, curr) => acc + curr, 0)
// }
// console.log(sumOfSquares([1, 2, 3])) // Devrait afficher 14

// const sumOfSquare = (array) => {

//     let total = 0
//     for (const num of array) {

//         const square = num * num;
//         total += square


//     }
//     return total
// }
// console.log(sumOfSquare([4, 5, 6]))
// Exercice 9 : Filtrer les mots longs
// √âcris une fonction en JavaScript qui prend un tableau de cha√Ænes de caract√®res et retourne un nouveau tableau contenant uniquement les mots dont la longueur est sup√©rieure √† une valeur sp√©cifi√©e.

// Exemple :
// Entr√©e : ["chat", "√©l√©phant", "chien", "hippopotame"], 5

// Sortie : ["√©l√©phant", "hippopotame"]

// Entr√©e : ["pomme", "banane", "kiwi"], 4

// Sortie : ["pomme", "banane"]

// Indice : Utilise filter() pour cr√©er un tableau avec les mots dont la longueur est sup√©rieure √† la valeur sp√©cifi√©e.

// const longestWord = (array, size) => {
//     return array.filter(word => word.length > size);
// }

// console.log(longestWord(["chat", "√©l√©phant", "chien", "hippopotame"], 5));

// console.log(longestWord(["pomme", "banane", "kiwi"], 4));


// Exercice 10 : Compter les occurrences des mots
// √âcris une fonction en JavaScript qui prend un tableau de cha√Ænes de caract√®res et retourne un objet o√π chaque cl√© est un mot du tableau et chaque valeur est le nombre d'occurrences de ce mot.

// Exemple :
// Entr√©e : ["chat", "chien", "chat", "souris", "chien", "chat"]

// Sortie : {"chat": 3, "chien": 2, "souris": 1}

// Entr√©e : ["pomme", "banane", "kiwi", "banane", "kiwi"]

// Sortie : {"pomme": 1, "banane": 2, "kiwi": 2}

// Indice : Tu peux utiliser un objet pour stocker les mots et leurs occurrences en it√©rant sur le tableau.

// Si tu as besoin d'aide ou d'indices, n'h√©site pas √† demander ! üòä

// const countWord = (array) => {
//     const obj = {}
//     for (const word of array) {
//         if (!obj[word]) {
//             obj[word] = 1
//         } else {
//             obj[word] += 1
//         }
//     }
//     return obj
// }
// const countWord = (array) => {
// const obj = {}
// for(let i = 0; i < array.length; i++) {
//     if (obj[array[i]]) {
//         obj[array[i]]++
//     } else {
//         obj[array[i]] = 1
//     }
// }
// return obj
// }
//ou
const countWord = (array) => {
    return array.reduce((acc, curr) => {
        if (acc[curr]) {
            // Si le mot existe d√©j√†, tu incr√©mentes
            acc[curr] += 1; //acc[curr] est la cl√© de l'objet acc et += 1 incr√©mente la valeur de cette cl√©
        } else {
            // Sinon, tu l'initialises √† 1
            acc[curr] = 1;
        }
        return acc;
    }, {});//ici on cr√©e un objet vide pour stocker les mots et leurs occurrences
}
console.log(countWord(["chat", "chien", "chat", "souris", "chien", "chat"]))

// Lorsque tu ex√©cutes console.log(countWord(["chat", "chien", "chat", "souris", "chien", "chat"])), tu devrais obtenir un objet qui montre combien de fois chaque mot appara√Æt.
// if (!obj[word]) :

// Cette condition v√©rifie si obj[word] est "falsy", c'est-√†-dire s'il n'existe pas encore dans l'objet obj. En JavaScript, un mot cl√© n'existant pas dans un objet renvoie undefined, ce qui est consid√©r√© comme "falsy".
// Si le mot n'existe pas dans obj, cela signifie que c'est la premi√®re fois que tu rencontres ce mot.
// obj[word] = 1 :

// Si le mot est nouveau (il n'existe pas encore dans l'objet), tu l'ajoutes √† l'objet obj et tu lui assignes la valeur 1. Cela signifie que tu comptes ce mot pour la premi√®re fois.
// else :

// Si le mot existe d√©j√† dans l'objet (c'est-√†-dire qu'il a d√©j√† √©t√© rencontr√© auparavant), tu passes dans cette branche.
// obj[word] += 1 :

// En r√©sum√©, obj[word] est la bonne approche pour utiliser des cl√©s dynamiques bas√©es sur le contenu d'une variable, tandis que obj.word est pour acc√©der √† une cl√© fixe, ce qui ne serait pas utile dans ce contexte. Si tu as d'autres questions, fais-le moi savoir ! üòä

// Exercice 11 : Fusionner deux tableaux
// √âcris une fonction en JavaScript qui prend deux tableaux de nombres et retourne un tableau contenant les √©l√©ments des deux tableaux, sans doublons.

// Exemple :
// Entr√©e : [1, 2, 3] et [2, 3, 4, 5]

// Sortie : [1, 2, 3, 4, 5]

// Entr√©e : [7, 8, 9] et [9, 10, 11, 12]

// Sortie : [7, 8, 9, 10, 11, 12]

// Indice : Tu peux utiliser la m√©thode concat() pour combiner les tableaux, puis le Set pour √©liminer les doublons.

// const concatArray = (arr1, arr2) => {
//     const newArr = arr1.concat(arr2)
//     return [...new Set(newArr)]
// }
// console.log(concatArray([1, 2, 3], [2, 3, 4, 5]))
// console.log(concatArray([7, 8, 9], [7, 9, 10, 11, 12]))