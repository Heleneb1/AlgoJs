// Peux-tu √©crire une fonction en JavaScript qui renverse une cha√Æne de caract√®res ? üîÑ

// üìù ùóòùòÖùó≤ùó∫ùóΩùóπùó≤ : Si on te donne la cha√Æne "ùêªùëíùëôùëôùëú", la fonction devrait retourner "ùëúùëôùëôùëíùêª".

// üí° ùóúùóªùó±ùó∂ùó∞ùó≤ : Pense √† des m√©thodes JavaScript qui transforment les cha√Ænes en tableaux. Un petit coup de manipulation et hop, tu obtiens ta cha√Æne invers√©e ! üòâ

// üëâ ùó£ùóºùòÄùòÅùó≤ ùòÅùóÆ ùòÄùóºùóπùòÇùòÅùó∂ùóºùóª ùó≤ùóª ùó∞ùóºùó∫ùó∫ùó≤ùóªùòÅùóÆùó∂ùóøùó≤, et voyons qui pourra r√©soudre ce d√©fi le plus vite ! ‚è±Ô∏è

const reverseString = (string) => string.split("").reverse().join("");

console.log(reverseString("Hello"));

// üí° ùóóùó≤ÃÅùó≥ùó∂ :
// √âcris une fonction en JavaScript qui prend un tableau de nombres et renvoie la somme de tous les nombres pairs du tableau.

// üìù ùóòùòÖùó≤ùó∫ùóΩùóπùó≤ :
// Si tu as le tableau [1, 2, 3, 4, 5, 6], la fonction devrait retourner 12 car 2 + 4 + 6 = 12.

// üîß ùóúùóªùó±ùó∂ùó∞ùó≤ :
// Tu pourrais utiliser une boucle ou une m√©thode comme filter() pour s√©lectionner les nombres pairs, puis reduce() pour les additionner.

// Pr√™te √† relever le d√©fi ? H√¢te de voir ta solution ! üòÑ

// const evenSum = (array) => {
//   let sum = 0;
//   for (let i = 0; i<array.length; i++){
//     if(array[i]%2===0){
//         sum+= array[i]
//     }
//   }
//   return sum
// };
const evenSum = (array) => {
    let sum = 0;
    return array.filter((num) => num % 2 === 0).reduce((acc, curr) => acc + curr);
};

console.log(evenSum([1, 2, 3, 4, 5, 6]));

// üí° ùóóùó≤ÃÅùó≥ùó∂ :
// √âcris une fonction en JavaScript qui prend une cha√Æne de caract√®res et renvoie le nombre de voyelles dans cette cha√Æne.

// üìù ùóòùòÖùó≤ùó∫ùóΩùóπùó≤ :
// Pour la cha√Æne "Hello World", la fonction devrait retourner 3 (les voyelles sont e, o, o).

// üîß ùóúùóªùó±ùó∂ùó∞ùó≤ :
// Tu peux utiliser une boucle pour parcourir la cha√Æne et v√©rifier si chaque caract√®re est une voyelle. Une m√©thode comme includes() pourrait √™tre utile pour v√©rifier la pr√©sence d'une voyelle dans un ensemble de caract√®res.

// H√¢te de voir ce que tu vas proposer ! üòä

// const countVowels = (string) => {
//   const vowels = ["a", "e", "i", "o", "u"];
//   let count = 0;
//   let newArr = [];
//   for (const letter of string) {
//     if (vowels.includes(letter)) {
//       count++;
//       newArr.push(letter);
//     }
//   }
//   return [count, newArr];
// };
// const countVowels = (string) => {
//   const vowels = ["a", "e", "i", "o", "u"];
//    return string
//     .split("")
//     .map((letter) => vowels.includes(letter))
//     .filter((vowels) => vowels).length;
// };

const countVowels = (string) => {
    const vowels = ["a", "e", "i", "o", "u"];
    string = string.split("");
    let object = {};
    let count = 0;
    for (let i = 0; i < string.length; i++) {
        let letter = string[i];
        if (vowels.includes(letter)) {
            count++;
            if (!object[letter]) {
                object[letter] = 1;
            } else {
                object[letter]++;
            }
        }
    }
    // console.log(object);
    return [count, object];
};

console.log(countVowels("Hello World")); //la fonction devrait retourner 3 (les voyelles sont e, o, o)

// üí° ùóóùó≤ÃÅùó≥ùó∂ :
// √âcris une fonction en JavaScript qui prend un tableau de cha√Ænes de caract√®res et renvoie un tableau contenant uniquement les cha√Ænes qui contiennent plus de trois caract√®res.

// üìù ùóòùòÖùó≤ùó∫ùóΩùóπùó≤ :
// Pour le tableau ["Hi", "Hello", "world", "JS", "programming"], la fonction devrait retourner ["Hello", "world", "programming"].

// üîß ùóúùóªùó±ùó∂ùó∞ùó≤ :
// Tu peux utiliser la m√©thode filter() pour cr√©er un nouveau tableau bas√© sur une condition qui v√©rifie la longueur de chaque cha√Æne.

// H√¢te de voir ta solution ! üòä

const moreThanThreeChar = (array) => {
    return array.filter((elem) => elem.length > 3 //pas besoin de condition if car filter() le fait d√©j√† et pas de.push() car filter() retourne d√©j√† un tableau
    );
};


console.log(moreThanThreeChar(["Hi", "Hello", "world", "JS", "programming"]));

// üí° ùóóùó≤ÃÅùó≥ùó∂ :
// √âcris une fonction en JavaScript qui prend un tableau de nombres et retourne un tableau avec chaque nombre multipli√© par deux.

// üìù ùóòùòÖùó≤ùó∫ùóΩùóπùó≤ :
// Pour le tableau [1, 2, 3, 4, 5], la fonction devrait retourner [2, 4, 6, 8, 10].

// üîß ùóúùóªùó±ùó∂ùó∞ùó≤ :
// Tu peux utiliser la m√©thode map() pour cr√©er un nouveau tableau bas√© sur une transformation de chaque √©l√©ment.

// H√¢te de voir ta solution ! üòä

const doubleArray = (array) => {
    return array.map((elem) => elem * 2);
};

console.log(doubleArray([1, 2, 3, 4, 5])); //[2, 4, 6, 8, 10]

// 1. Filtrer les Nombres Positifs
// √âcris une fonction qui prend un tableau de nombres et retourne un tableau contenant uniquement les nombres positifs.
const positifNumber = (array) => array.filter((number) => number > 0);
console.log(positifNumber([-1, 2, -3, 4, -5]));

// 2. Compter les Lettres dans une Cha√Æne
// √âcris une fonction qui prend une cha√Æne de caract√®res et retourne un objet o√π chaque propri√©t√© est une lettre et sa valeur est le nombre d'occurrences de cette lettre dans la cha√Æne. Ignore les espaces.

const countLetter = (string) => {
    let letter = {};
    string = string.toLowerCase();

    for (let i = 0; i < string.length; i++) {
        let char = string[i];
        if (char !== " ") {//ici on ignore les espaces
            if (!letter[string[i]]) { //on peut remplacer if(!letter[string[i]] par if (!letter[char])
                letter[string[i]] = 1;
            } else {

                letter[string[i]]++;
            }
        }
    }
    return [letter];
};

console.log(countLetter("Hello World")); // Cela devrait retourner { h: 1, e: 1, l: 3, o: 2, w: 1, r: 1, d: 1 }
console.log(countLetter("OpenAI ChatGPT")); // Cela devrait retourner { o: 1, p: 2, e: 1, n: 1, a: 3, i: 1, c: 1, h: 1, t: 2, g: 1 }

// 3. Inverser un Tableau
// √âcris une fonction qui prend un tableau et retourne un nouveau tableau avec les √©l√©ments dans l'ordre inverse.
const reverseArray = (array) => {
    return array.reverse()
};
console.log(reverseArray([1, 2, 3, 4, 5])); // Cela devrait retourner [5, 4, 3, 2, 1]
console.log(reverseArray(['a', 'b', 'c', 'd'])); // Cela devrait retourner ['d', 'c', 'b', 'a']
console.log(reverseArray([true, false, true])); // Cela devrait retourner [true, false, true]
console.log(reverseArray([])); // Cela devrait retourner [] (un tableau vide)
console.log(reverseArray([1]));

// 4. Trouver le Maximum
// √âcris une fonction qui prend un tableau de nombres et retourne le plus grand nombre du tableau.
const maxValue = (array) => Math.max(...array)

console.log(maxValue([1, 2, 52, 789, 43, 1525, 15]))

// 5. Concat√©ner des Cha√Ænes
// √âcris une fonction qui prend un tableau de cha√Ænes de caract√®res et retourne une seule cha√Æne qui est la concat√©nation de toutes les cha√Ænes du tableau, s√©par√©es par des espaces.

const concatString = (array) => {
    return array.join(" ");
};

// Tests
console.log(concatString(["Hello", "World"])); // Cela devrait retourner "Hello World"
console.log(concatString(["OpenAI", "ChatGPT", "rocks"])); // Cela devrait retourner "OpenAI ChatGPT rocks"
console.log(concatString(["I", "love", "coding"])); // Cela devrait retourner "I love coding"
console.log(concatString([])); // Cela devrait retourner "" (une cha√Æne vide)
console.log(concatString(["SingleWord"])); // Cela devrait retourner "SingleWord" (une seule cha√Æne)
