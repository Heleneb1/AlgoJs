// 1. V√©rifier un Palindrome
// √âcris une fonction isPalindrome(str) qui prend une cha√Æne de caract√®res et retourne true si c'est un palindrome (se lit de la m√™me mani√®re en avant et en arri√®re) et false sinon. Ignore la casse et les espaces.
// const isPalindrome = (str) => {
//     let cleanedStr = '';

//     // √âtape 1 : Conserver uniquement les caract√®res alphanum√©riques et convertir en minuscules
//     for (let i = 0; i < str.length; i++) {
//       const char = str[i].toLowerCase();
//       if (char >= 'a' && char <= 'z' || char >= '0' && char <= '9') {
//         cleanedStr += char;
//       }
//     }

//     // √âtape 2 : Comparer la cha√Æne nettoy√©e √† sa version invers√©e
//     const reversedStr = cleanedStr.split('').reverse().join('');

//     return cleanedStr === reversedStr;
//   };

//ou
// const isPalindrom=(str)=>{
//     return str.replace(/[^\w]/g, '').toLowerCase().split("").reverse().join("") === str.replace(/[^\w]/g, '').toLowerCase().split("").join('')
//   }
// Recherche tous les caract√®res non alphanum√©riques dans la cha√Æne (ce qui exclut les lettres, les chiffres et le caract√®re _).
// Supprime ces caract√®res en les rempla√ßant par une cha√Æne vide.
// \w est une classe de caract√®res qui correspond √† tous les caract√®res alphanum√©riques ainsi qu'au caract√®re de soulignement (_). Cela inclut les lettres majuscules et minuscules (A-Z, a-z), les chiffres (0-9) et le caract√®re _.
// ^ plac√© au d√©but d'un ensemble de caract√®res (entre crochets []) est un op√©rateur de n√©gation, ce qui signifie "tout sauf". Ainsi, [^\w] signifie tout ce qui n'est pas un caract√®re alphanum√©rique ou le caract√®re soulign√©.

//   console.log(isPalindrom("radar"))
//   console.log(isPalindrom("Elle"))
//   console.log(isPalindrom("Ai-buddy"))

//   console.log(isPalindrom("A Cuba, Anna a bu ca."))
// 2. Fusionner Deux Tableaux
// √âcris une fonction mergeArrays(arr1, arr2) qui prend deux tableaux en entr√©e et retourne un tableau contenant tous les √©l√©ments des deux tableaux, sans doublons.

// const mergeArrays = (arr1, arr2) => {
//     const newArr = arr1.concat(arr2)
//     const noDouble = [...new Set(newArr)]
//     return noDouble

// }
//ou en simplififi√©
// const mergeArrays = (arr1, arr2) => {
//     return [... new Set(arr1.concat(arr2))]
// }
// console.log(mergeArrays([1, 2, 3, 5, "poisson"], [1, 2, 3, 5, 6, 7, 8, "poisson"]))
// 3. Multiplier les Nombres d'un Tableau
// √âcris une fonction multiplyNumbers(arr, factor) qui prend un tableau de nombres et un facteur, et retourne un nouveau tableau avec chaque nombre multipli√© par le facteur.

// const multiplyNumbers = (arr, factor) => {
//     const result = []
//     for (let i = 0; i < arr.length; i++) {
//         result.push(arr[i] * factor)
//     }
//     return result
// }
// ou
// const multiplyNumbers = (arr, factor) => {
//     return arr.map((num) => num * factor) //on mappe chaque √©l√©ment du tableau et on le multiplie par le facteur Logique non?üòâ
// }


// console.log(multiplyNumbers([1, 5, 3, 9, 2], 5))//

// 4. Compter les Consonnes
// √âcris une fonction countConsonants(str) qui prend une cha√Æne de caract√®res et retourne le nombre de consonnes pr√©sentes dans la cha√Æne.

// const countConsonants = (str) => {
//     const vowels = ['a', 'e', 'i', 'o', 'u']
//     let count = 0;
//     let string = str.toLowerCase()
//     for (const letter of string) {
//         if (/[a-z]/.test(letter) && !vowels.includes(letter)) {//ici pour v√©rifier que letter est une lettre
//             count++
//         }
//     }
//     return count
// }
// console.log(countConsonants('heleneb est joie'))
// console.log(countConsonants('roots'))

// 5. Trouver le Moins Nombre
// √âcris une fonction findMinNumber(arr) qui prend un tableau de nombres et retourne le plus petit nombre.


// const findMinNumber = (arr) => {
//     return Math.min(...arr)
// }
// console.log(findMinNumber([5, 3, 9, 2]))
//ou
// const findMinNumber = (arr) => {
//     let num = arr[0]
//     for (let i = 1; i < arr.length; i++) {
//         if (arr[i] <= num)
//             num = arr[i]
//     }
//     return num
// }
// console.log(findMinNumber([5, 3, 9, 2]))

// 6. Inverser un Tableau
// √âcris une fonction reverseArray(arr) qui prend un tableau et retourne un nouveau tableau contenant les m√™mes √©l√©ments mais dans l'ordre inverse.

// const reverseArray = (arr) => {
//     return arr.slice().reverse()//cr√©er une copie du tableau en utilisant slice()
// }
// console.log(reverseArray([1, 2, 3, 5, "poisson"]))
//ou
// const reverseArray = (arr) => {
//     const newArr = []
//     for (let i = arr.length - 1; i >= 0; i--) {

//         newArr.push(arr[i])
//     }
//     return newArr
// }
// console.log(reverseArray([1, 2, 3, 5, "poisson"]))
//TODO:revoir
// 7. Trouver les Nombres Primes
// √âcris une fonction findPrimes(max) qui prend un nombre maximal et retourne un tableau contenant tous les nombres premiers jusqu'√† ce nombre.
// const findMax = (maxNumber) => {
//     const prime = []

//     for (let i = 2; i < maxNumber; i++) {
//         let isPrime = true//On initialise isPrime √† true pour chaque nombre i.
//         for (let j = 2; j < i; j++)//Cette condition v√©rifie si i est divisible par j sans reste (i % j === 0). Si c'est le cas, i n'est pas un nombre premier.
//             if (i % j === 0) {
//                 isPrime = false//i est divisible par un autre nombre, on change isPrime √† false, indiquant que ce nombre n'est pas premier.
//                 break; // On sort de la boucle interne d√®s qu'on trouve un diviseur. Inutile de continuer √† v√©rifier d'autres nombres, car i ne peut plus √™tre un nombre premier.

//             }
//         if (isPrime) {
//             prime.push(i)
//         }
//     }
//     return prime
// }

// console.log((findMax(25)))



// 8. G√©n√©rer une Liste de Carr√©s
// √âcris une fonction generateSquares(n) qui prend un nombre n et retourne un tableau contenant les carr√©s des nombres de 1 √† n.
// const generateSquares = (n) => {
//     let squares = []
//     for (let i = 1; i <= n; i++) {
//         squares.push(i * i)
//     }
//     return squares
// }

// console.log(generateSquares(6))

// 9. Compter les Mots
// √âcris une fonction countWords(str) qui prend une cha√Æne de caract√®res et retourne le nombre de mots dans cette cha√Æne. Les mots sont s√©par√©s par des espaces.
// const countWords = (str) => {
//     return str.split(" ").length
// }
// 10. Remplacer les Voyelles
// √âcris une fonction replaceVowels(str, char) qui prend une cha√Æne de caract√®res et un caract√®re, et remplace toutes les voyelles de la cha√Æne par ce caract√®re.
// const replaceVowels = (str, char) => {
//     const vowels = ["a", "e", "i", "o", "u"]
//     const string = str.split("")
//     for (let i = 0; i < string.length; i++) {

//         if (vowels.includes(string[i].toLowerCase())) {

//             string[i] = char
//         }
//     }
//     return string.join("")

// }

// console.log(replaceVowels('Le petit chat dort dans la chambre.', '*'));
// // R√©sultat attendu : "L* p*t*t ch*t d*rt d*ns l* ch*mbr*"

// console.log(replaceVowels('HELLO world', '#'));
// // R√©sultat attendu : "H#LL# w#rld"

// console.log(replaceVowels('Ai-buddy est g√©nial!', '-'));
// // R√©sultat attendu : "---b-ddy -st g√©n--l!"

// 1. Trier un Tableau
// √âcris une fonction sortArray(arr) qui prend un tableau de nombres et le retourne tri√© par ordre croissant.

// const sortArray = (arrNum) => {
//     return arrNum.sort((a, b) => a - b)
// }


// console.log(sortArray([-2, -10, 15, 5, 8, 2, 0, 1]))

// 2. Filtrer les Nombres Pairs
// √âcris une fonction filterEvenNumbers(arr) qui prend un tableau de nombres et retourne un nouveau tableau contenant uniquement les nombres pairs.

// const filterEvenNumbers = (arr) => arr.filter((num) => num % 2 === 0)
// //ou
// const filterEvenNumbers = (arr) => {
//     let num = arr[0]
//     let evenArr = []
//     for (let i = 0; i < arr.length; i++) {
//         if (arr[i] % 2 === 0) {
//             evenArr.push(arr[i])
//         }
//     }
//     return evenArr
// }

// console.log(filterEvenNumbers([-2, -10, 15, 5, 8, 2, 0, 1]))//[ -2, -10, 8, 2, 0 ]

// 3. Trouver la Longueur du Mot le Plus Long
// √âcris une fonction longestWord(str) qui prend une phrase et retourne la longueur du mot le plus long dans cette phrase.
// 3. Trouver la Longueur du Mot le Plus Long
// √âcris une fonction longestWord(str) qui prend une phrase et retourne la longueur du mot le plus long dans cette phrase.
// const longestWord = (str) => {

//     let string = str.replace(/[^\w]g/).toLowerCase().split(" ")
//     let longest = 0
//     console.log(string)
//     for (let i = 0; i < string.length; i++) {
//         if (string[i].length > longest) {
//             longest = string[i].length
//         }
//     }
//     return longest
// }
// console.log(longestWord("Salut les petits, je vous aime"))

// 4. Calculer la Somme des √âl√©ments d'un Tableau
// √âcris une fonction sumArray(arr) qui prend un tableau de nombres et retourne la somme de ses √©l√©ments.



// const sumArray = (arr) => {
//     return arr.reduce((acc, curr) => acc + curr, 0)
// }

// console.log(sumArray([1, 2, 3, 4, 5]))//15

// 5. Trouver l'Indice d'un √âl√©ment
// √âcris une fonction findIndex(arr, element) qui prend un tableau et un √©l√©ment, et retourne l'indice de cet √©l√©ment dans le tableau (ou -1 si l'√©l√©ment n'existe pas).
// const findIndex = (arr, element) => arr.indexOf(element)

// //ou manuellement
// const findIndex = (arr, element) => {

//     for (let i = 0; i < arr.length; i++) {
//         if (arr[i] === element) {
//             return i
//         }
//     }
//     return -1
// }

// console.log(findIndex([10, 20, 30, 40, 50], 30)); // Devrait afficher 2
// console.log(findIndex(['apple', 'banana', 'orange'], 'banana')); // Devrait afficher 1
// console.log(findIndex([true, false, true], false)); // Devrait afficher 1
// console.log(findIndex([1, 2, 3, 4, 5], 6)); // Devrait afficher -1
// console.log(findIndex([], 'test')); // Devrait afficher -1

// 6. V√©rifier si une Cha√Æne Contient un Mot
// √âcris une fonction containsWord(str, word) qui prend une cha√Æne de caract√®res et un mot, et retourne true si la cha√Æne contient ce mot, false sinon.

// const containsWord=(str, word)=>{
//   // return str.toLowerCase().split(" ").filter((findStr)=>findStr===word)//retourne le mot
//   return str.includes(word)
// }
//ou
// const containsWord = (str, word) => {
//     str = str.split(' ')
//     for (let i = 0; i < str.length; i++) {
//         if (str[i] === word) {
//             return true
//         }
//     }
//     return false
// }

// console.log(containsWord("Salut les petits, je vous aime", "rien"))
// console.log(containsWord("Salut les petits, je vous aime", "aime"))
// 7. Calculer la Factorielle
// √âcris une fonction factorial(n) qui prend un nombre n et retourne sa factorielle.
// 7. Calculer la Factorielle
// √âcris une fonction factorial(n) qui prend un nombre n et retourne sa factorielle.
//     n != n√ó(n‚àí1)√ó(n‚àí2)√ó‚Ä¶√ó3√ó2√ó1

// const factorial = (n) => {
//     let result = 1
//     for (let i = 1; i <= n; i++) {
//         result *= i
//     }
//     return result
// }
// console.log(factorial(5))

// 8. Fusionner et Trier Deux Tableaux
// √âcris une fonction mergeAndSort(arr1, arr2) qui prend deux tableaux, les fusionne, puis retourne le tableau fusionn√© tri√©.

// const mergeAndSort = (arr1, arr2) => {
//     return arr1.concat(arr2).sort((a, b) => a - b)
// }
// console.log(mergeAndSort([3, 1, 4], [2, 5, 0])); // Devrait afficher [0, 1, 2, 3, 4, 5]
// console.log(mergeAndSort([-1, -5, 3], [2, 0, 1])); // Devrait afficher [-5, -1, 0, 1, 2, 3]
// console.log(mergeAndSort([], [1, 2, 3])); // Devrait afficher [1, 2, 3]
// console.log(mergeAndSort([7, 8, 9], [])); // Devrait afficher [7, 8, 9]
// console.log(mergeAndSort([], [])); // Devrait afficher []
